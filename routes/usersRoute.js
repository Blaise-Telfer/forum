const express = require("express");
const router = express.Router();
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const keys = require("../config/db");
const passport = require("passport");
const crypto = require("crypto");
const User = require("../models/userModel");
const Post = require("../models/postModel");


//cloudinary configuration 
const cloudinary = require("cloudinary");
cloudinary.config({
  cloud_name: process.env.CLOUD_NAME,
  api_key: process.env.CLOUD_API_KEY,
  api_secret: process.env.CLOUD_API_SECRET
});


//multer configuration
const multer = require("multer");
const storage = multer.diskStorage({
  filename: function(req, file, callback) {
    callback(null, Date.now() + file.originalname);
  }
});
const imageFilter = function(req, file, cb) {
  // accept image files only
  if (!file.originalname.match(/\.(jpg|jpeg|JPG|JPEG|png)$/i)) {
    return cb(new Error("Only image files are accepted!"), false);
  }
  cb(null, true);
};
const upload = multer({ storage: storage, fileFilter: imageFilter });

//PDF configuration
const pdfFilter = function(req, file, cb) {
  // accept word files only
  if (!file.originalname.match(/\.(pdf)$/i)) {
    return cb(new Error("Only text documents are accepted!"), false);
  }
  cb(null, true);
};
const uploadPDF = multer({ storage: storage, fileFilter: pdfFilter });





//display user info on account page
router.get('/user/:username', (req,res) => {
    
	User.findOne({username: req.params.username})
	.select("-password -confirmPassword")
	.then(user => {
		if(!user){
            res.status(404).json({errors:{global:'user does not exist'}})
        }
		else{
			res.status(200).json({user: user, status: "success"});
		}
	})
});




//display the user's posts on the user's account page
router.get('/:username', (req,res) => {
    User.findOne({username: req.params.username}).then(user => {
        if(!user){
            res.status(404).json({errors:{global:'user does not exist'}})
        }
        else{
            Post.find({author: req.params.username})
			.populate({
				path: "createdBy",
				select: "email username Bookmarks",
			})
			.then(post => {
				if(post){
					res.status(200).json({post: post})
				}
				else{
					res.status(404).json({errors:{global:"post not found"}});
				}
			})
        }
    })
});


//edit a profile
router.post("/update/info", (req, res) => {
	
	const {userFrom, firstname, lastname, city, bio} = req.body;
	User.findOneAndUpdate(
		{ username: userFrom },
		{
			$set: {
				firstname: firstname,
				lastname: lastname,
				location: city,
				bio: bio
			}
		}
		).then((edited) => {
			return res.status(200).json({success: true, message: 'User edited.'});
		}).catch((error) => {
			return res.status(400).json({success: false, message: 'Edit failed.'});
		});
});

//edit profile pic
router.post("/update/photo", upload.single("photo"), (req, res) => {
	
	cloudinary.v2.uploader.upload(req.file.path, function(err, result){
		if (err) {
		  return res.status(400).json({success: false, message: err});
		}
		
		//url generated by Cloudinary
		const newPic = result.secure_url;
		const {userFrom, photo} = req.body;
		User.findOneAndUpdate(
			{ username: userFrom },
			{
				$set: {
					photo: newPic
				}
			}
		).then((edited) => {
			return res.status(200).json({success: true, message: 'User edited.'});
		}).catch((error) => {
			return res.status(400).json({success: false, message: 'Edit failed.'});
		});
    });
});


//edit resume
router.post("/update/resume", uploadPDF.single("resume"), (req, res) => {
	
	cloudinary.v2.uploader.upload(req.file.path, {flags: "attachment"}, function(err, result){
		if (err) {
		  return res.status(400).json({success: false, message: err});
		}
		
		//url generated by Cloudinary
		const newResume = result.secure_url;
		const {userFrom, resume} = req.body;
		User.findOneAndUpdate(
			{ username: userFrom },
			{
				$set: {
					resume: newResume
				}
			}
		).then((edited) => {
			return res.status(200).json({success: true, message: 'User edited.'});
		}).catch((error) => {
			return res.status(400).json({success: false, message: 'Edit failed.'});
		});
    });
	
});



//display all users in the admin panel
router.get('/', (req,res) => {
    User.find()
	.then((data) => {
		let users = [];
		data.map((item) => {
			users.push({
				_id: item.id,
				email: item.email,
				username: item.username
			});
		});
	   res.status(200).json({users});
    })
});




module.exports = router;
